											NEXT PERMUTATION

Given an array of integers arr[] representing a permutation, implement the next permutation that rearranges the numbers into the lexicographically next greater permutation. If no such permutation exists, rearrange the numbers into the lowest possible order (i.e., sorted in ascending order). 

Note - A permutation of an array of integers refers to a specific arrangement of its elements in a sequence or linear order.

Examples:

Input: arr = [2, 4, 1, 7, 5, 0]
Output: [2, 4, 5, 0, 1, 7]
Explanation: The next permutation of the given array is {2, 4, 5, 0, 1, 7}.
Input: arr = [3, 2, 1]
Output: [1, 2, 3]
Explanation: As arr[] is the last permutation, the next permutation is the lowest one.



											SOLUTION

class Solution:
    def nextPermutation(self, arr):
        n = len(arr)
        
        def reverse(arr, start, end):
            while start < end:
                arr[start], arr[end] = arr[end], arr[start]
                start += 1
                end -= 1
            return arr
            
        i = n - 2
        while arr[i] >= arr[i + 1] and i >= 0:
            i -= 1
        
        if i >= 0:
            j = n - 1
            while arr[j] <= arr[i]:
                j -= 1
            arr[i], arr[j] = arr[j], arr[i]
            reverse(arr, i + 1, n - 1)
            
        else:
            reverse(arr, 0, n - 1)




# THE ABOVE reverse function can be replaced by two ways
# 1)	left, right = i + 1, n - 1
    	while left < right:
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
            right -= 1
# handles corner case where all elements are in decreasing order, when such cases the i will be having index -1 while reversing, i + 1 ==> -1 + 1 which is 0

# 2) arr[i + 1:] = reversed(arr[i + 1:]) which consumes extra space
            