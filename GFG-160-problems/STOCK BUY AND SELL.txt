								STOCK BUY AND SELL


Problem statement:
The cost of stock on each day is given in an array price[]. Each day you may decide to either buy or sell the stock i at price[i], you can even buy and sell the stock on the same day. Find the maximum profit that you can get.

Note: A stock can only be sold if it has been bought previously and multiple stocks cannot be held on any given day.

Examples:

Input: prices[] = [100, 180, 260, 310, 40, 535, 695]
Output: 865
Explanation: Buy the stock on day 0 and sell it on day 3 => 310 – 100 = 210. Buy the stock on day 4 and sell it on day 6 => 695 – 40 = 655. Maximum Profit = 210 + 655 = 865.


Input: prices[] = [4, 2, 2, 2, 4]
Output: 2
Explanation: Buy the stock on day 3 and sell it on day 4 => 4 – 2 = 2. Maximum Profit = 2.
Constraints:
1 <= prices.size() <= 105
0 <= prices[i] <= 104


								SOLUTION

My Code:
class Solution:
    def maximumProfit(self, prices) -> int:
        # code here
        if len(arr) == 1:
            return 0
        i = None
        bs = None
        if prices[0] > prices[1]:
            bs = prices[1]
            i = 2
        else:
            bs = prices[0]
            i = 1
        max = bs
        profit = 0
        while i < len(prices):
            if prices[i] > max:
                max = prices[i]
                i += 1
            else:
                profit += prices[i - 1] - bs
                bs = prices[i]
                max = bs
                i += 1
        if prices[i - 1] >= max:
            profit += prices[i - 1] - bs
        
        return profit

# Works good, and time and space complexities are satisfied 
# but in readability and simplicity it is messy

								OPTIMIZED SOLUTION

class Solution:
    def maximumProfit(self, prices) -> int:
	profit = 0
	for i in range(1, len(prices)):
	    if prices[i] > prices[i - 1]:
		profit += prices[i] - prices[i - 1]
	return profit
	